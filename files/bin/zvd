#!/usr/bin/env python3
"""manage the installed versions of zig"""
import argparse
import dataclasses
import re
import shlex
import subprocess
import urllib.parse as uparse

VERSION_REGEX = re.compile(r"https://ziglang\.org/download/(?P<version>.*)/zig-linux-x86_64-0\.13\.0\.tar\.xz")
DOWNLOAD_URL = "https://ziglang.org/download/{version}/zig-linux-x86_64-{version}.tar.xz"
DOWNLOAD_DIR = "/home/tyler/.local/bin/"
DOWNLOAD_PATH = "/home/tyler/.local/bin/zig-linux-x86_64-{version}.tar.xz"
BIN_PATH = "/home/tyler/.local/bin/zig-linux-x86_64-{version}/zig"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("version", help="The Version to install")
    parser.add_argument("-n", "--no-relink", help="Do not relink `zig` command to this new version", action="store_false")
    args = parser.parse_args()

    version, url = version_and_url(args.version)
    download_tar(url)
    unpack_tar(version)
    link(version, relink=args.no_relink)

def version_and_url(version)-> (str, str):
    """Converts the version argument into a standard url"""
    if uparse.urlparse(version).scheme:
        url = version
        if m := VERSION_REGEX.match(version):
            version = m.groupdict()['version']
    else:
        url = DOWNLOAD_URL.format(version=version)
    return version, url

def download_tar(url):
    cmd = f"wget '{url}'"
    print(f"Downloading from url")
    subprocess.run(shlex.split(cmd), cwd=DOWNLOAD_DIR)

def unpack_tar(version):
    tar_path = DOWNLOAD_PATH.format(version=version)
    cmd = f"tar -xJf '{tar_path}'"
    out = subprocess.run(shlex.split(cmd), capture_output=True, cwd=DOWNLOAD_DIR)
    cmd = f"rm '{tar_path}'"
    subprocess.run(shlex.split(cmd), cwd=DOWNLOAD_DIR)

def link(version, relink=True):
    link_name = f"zig{version}"
    bin_path = BIN_PATH.format(version=version)
    cmd = f"ln -sf {bin_path} {link_name}"
    subprocess.run(shlex.split(cmd), cwd=DOWNLOAD_DIR)
    if relink:
        cmd =  f"ln -sf {link_name} zig"
        subprocess.run(shlex.split(cmd), cwd=DOWNLOAD_DIR)

if __name__ == "__main__":
    main()
